(()=>{var e={993:(e,t,s)=>{s(818).config();const r=s(252),a=s(577),o=s(68),i=s(516),n=s(86),{apiLimiter:c}=s(334),u=s(665),m=r();m.use(r.json()),m.use(a({origin:process.env.FRONTEND_URL,credentials:!0})),m.use(c),o(),m.get("/api/health",((e,t)=>{t.status(200).json({status:"ok",message:"Server is running",timestamp:(new Date).toISOString()})})),m.use("/api/users",i),m.use("/api/waitlist",n),m.use(((e,t,s,r)=>{u.error("Error:",e.stack),s.status(500).json({status:"error",message:"Something went wrong!"})}));const l=process.env.PORT||5e3,d=m.listen(l,(()=>{u.info(`Server running on port ${l}`),u.info("Environment: production")}));process.on("unhandledRejection",(e=>{u.error("Unhandled Rejection:",e),d.close((()=>process.exit(1)))})),process.on("uncaughtException",(e=>{u.error("Uncaught Exception:",e),d.close((()=>process.exit(1)))})),e.exports=m},68:(e,t,s)=>{const r=s(37);e.exports=async()=>{try{const e=await r.connect("mongodb+srv://trooidsteam:Pakistan123@fahadv2.pwz5e.mongodb.net/?retryWrites=true&w=majority&appName=Fahadv2",{useNewUrlParser:!0,useUnifiedTopology:!0});console.log(`MongoDB Connected: ${e.connection.host}`),r.connection.on("error",(e=>{console.error("MongoDB connection error:",e)})),r.connection.on("disconnected",(()=>{console.log("MongoDB disconnected")}))}catch(e){console.error("Error connecting to MongoDB:",e.message),process.exit(1)}}},705:(e,t,s)=>{const r=s(572),a=s(665);let o;o=r.createTransport({service:"gmail",auth:{user:process.env.EMAIL_USER,pass:process.env.EMAIL_APP_PASSWORD}}),e.exports={sendEmail:async e=>{try{const t=await o.sendMail(e);return a.info("Email sent:",t.messageId),t}catch(e){throw a.error("Email error:",e),e}}}},665:(e,t,s)=>{const r=s(124),a=r.createLogger({level:"info",format:r.format.combine(r.format.timestamp(),r.format.json()),transports:[new r.transports.File({filename:"error.log",level:"error"}),new r.transports.File({filename:"combined.log"})]});e.exports=a},905:(e,t,s)=>{const r=s(822),{validationResult:a}=s(975),o=s(829),{sendEmail:i}=s(705),n=s(665),c=e=>o.sign({id:e},process.env.JWT_SECRET,{expiresIn:"30d"});t.register=async(e,t)=>{try{const s=a(e);if(!s.isEmpty())return t.status(400).json({status:"error",errors:s.array()});const{name:o,email:u,password:m,state:l}=e.body;if(await r.findOne({email:u}))return t.status(400).json({status:"error",message:"Email already registered"});const d=new r({name:o,email:u,password:m,state:l,status:"pending"});await d.save();const p=c(d._id);try{await i({to:u,subject:"Welcome to Our Platform!",html:`\n                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">\n                        <h1>Welcome ${o}!</h1>\n                        <p>Thank you for registering with us. We're excited to have you as a new member!</p>\n                        <p>Your account has been successfully created and you can now access all our features.</p>\n                        <p>If you have any questions or need assistance, don't hesitate to reach out to our support team.</p>\n                        <p>Best regards,<br>The Team</p>\n                    </div>\n                `})}catch(e){n.error("Failed to send welcome email:",e)}t.status(201).json({status:"success",message:"Registration successful",data:{token:p,user:d.getPublicProfile()}})}catch(e){n.error("Registration error:",e),t.status(500).json({status:"error",message:"Server error occurred"})}},t.login=async(e,t)=>{try{const{email:s,password:a}=e.body,o=await r.findOne({email:s}).select("+password");if(!o)return t.status(401).json({status:"error",message:"Invalid credentials"});if(!await o.comparePassword(a))return t.status(401).json({status:"error",message:"Invalid credentials"});const i=c(o._id);t.json({status:"success",data:{token:i,user:o.getPublicProfile()}})}catch(e){n.error("Login error:",e),t.status(500).json({status:"error",message:"Server error occurred"})}},t.getProfile=async(e,t)=>{try{const s=await r.findById(e.user.id);if(!s)return t.status(404).json({status:"error",message:"User not found"});t.json({status:"success",data:{user:s.getPublicProfile()}})}catch(e){n.error("Profile fetch error:",e),t.status(500).json({status:"error",message:"Server error occurred"})}},t.updateProfile=async(e,t)=>{try{const s=["name","state"],a=Object.keys(e.body);if(!a.every((e=>s.includes(e))))return t.status(400).json({status:"error",message:"Invalid updates"});const o=await r.findById(e.user.id);if(!o)return t.status(404).json({status:"error",message:"User not found"});a.forEach((t=>o[t]=e.body[t])),await o.save(),t.json({status:"success",data:{user:o.getPublicProfile()}})}catch(e){n.error("Profile update error:",e),t.status(500).json({status:"error",message:"Server error occurred"})}}},963:(e,t,s)=>{const r=s(323),{validationResult:a}=s(975),{sendEmail:o}=s(705),i=s(665);t.joinWaitlist=async(e,t)=>{try{const s=a(e);if(!s.isEmpty())return t.status(400).json({status:"error",errors:s.array()});const{name:n,email:c}=e.body;if(await r.findOne({email:c}))return t.status(400).json({status:"error",message:"Email already registered in waitlist"});const u=new r({name:n,email:c});await u.save();try{await o({to:c,subject:"Welcome to Our Waitlist!",html:`\n                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">\n                        <h1>Welcome ${n}!</h1>\n                        <p>Thank you for joining our waitlist. We're excited to have you with us!</p>\n                        <p>We'll keep you updated on our progress and let you know when you can access the platform.</p>\n                        <p>Best regards,<br>The Team</p>\n                    </div>\n                `})}catch(e){i.error("Failed to send welcome email:",e)}t.status(201).json({status:"success",message:"Successfully joined waitlist",data:{name:u.name,email:u.email,joinedAt:u.joinedAt,status:u.status}})}catch(e){i.error("Waitlist join error:",e),t.status(500).json({status:"error",message:"Server error occurred"})}},t.getWaitlistStats=async(e,t)=>{try{const e=await r.aggregate([{$group:{_id:"$status",count:{$sum:1},users:{$push:{name:"$name",email:"$email",joinedAt:"$joinedAt"}}}}]),s={total:await r.countDocuments(),byStatus:e.reduce(((e,t)=>(e[t._id]={count:t.count,users:t.users},e)),{})};t.json({status:"success",data:s})}catch(e){i.error("Waitlist stats error:",e),t.status(500).json({status:"error",message:"Failed to get waitlist stats"})}}},997:(e,t,s)=>{const r=s(829),a=s(822),o=s(665);e.exports=async(e,t,s)=>{try{const o=e.headers.authorization;if(!o||!o.startsWith("Bearer "))return t.status(401).json({status:"error",message:"No token, authorization denied"});const i=o.split(" ")[1],n=r.verify(i,process.env.JWT_SECRET),c=await a.findById(n.id);if(!c)return t.status(401).json({status:"error",message:"Token is invalid"});if("active"!==c.status)return t.status(401).json({status:"error",message:"Account is not active"});e.user=c,s()}catch(e){o.error("Authentication error:",e),t.status(401).json({status:"error",message:"Token is invalid"})}}},334:(e,t,s)=>{const r=s(763);t.apiLimiter=r({windowMs:9e5,max:100,message:"Too many requests from this IP, please try again later."}),t.waitlistLimiter=r({windowMs:36e5,max:60,message:"Too many waitlist requests from this IP, please try again later."})},822:(e,t,s)=>{const r=s(37),a=s(729),o=new r.Schema({name:{type:String,required:[!0,"Name is required"],trim:!0,minLength:[2,"Name must be at least 2 characters"],maxLength:[50,"Name cannot exceed 50 characters"]},email:{type:String,required:[!0,"Email is required"],unique:!0,lowercase:!0,trim:!0},password:{type:String,required:[!0,"Password is required"],minLength:[6,"Password must be at least 6 characters"],select:!1},state:{type:String,required:[!0,"State is required"],trim:!0},status:{type:String,enum:["pending","active","rejected"],default:"pending"},registeredAt:{type:Date,default:Date.now},lastUpdated:{type:Date,default:Date.now}},{timestamps:!0});o.pre("save",(async function(e){if(this.lastUpdated=new Date,!this.isModified("password"))return e();try{const t=await a.genSalt(10);this.password=await a.hash(this.password,t),e()}catch(t){e(t)}})),o.methods.comparePassword=async function(e){try{return await a.compare(e,this.password)}catch(e){throw new Error(e)}},o.methods.getPublicProfile=function(){const e=this.toObject();return delete e.password,e};const i=r.model("User",o);e.exports=i},323:(e,t,s)=>{const r=s(37),a=new r.Schema({name:{type:String,required:[!0,"Name is required"],trim:!0,minLength:[2,"Name must be at least 2 characters"],maxLength:[50,"Name cannot exceed 50 characters"]},email:{type:String,required:[!0,"Email is required"],unique:!0,lowercase:!0,trim:!0},status:{type:String,enum:["pending","approved","rejected"],default:"pending"},joinedAt:{type:Date,default:Date.now}},{timestamps:!0});e.exports=r.model("WaitlistUser",a)},516:(e,t,s)=>{const r=s(252),{check:a}=s(975),{register:o,login:i,getProfile:n,updateProfile:c}=s(905),u=s(997),m=r.Router(),l=[a("name").trim().notEmpty().withMessage("Name is required").isLength({min:2,max:50}).withMessage("Name must be between 2 and 50 characters"),a("email").trim().notEmpty().withMessage("Email is required").isEmail().withMessage("Please enter a valid email").normalizeEmail(),a("password").trim().notEmpty().withMessage("Password is required").isLength({min:6}).withMessage("Password must be at least 6 characters"),a("state").trim().notEmpty().withMessage("State is required")];m.post("/register",l,o),m.post("/login",[a("email").isEmail().normalizeEmail(),a("password").notEmpty()],i),m.get("/profile",u,n),m.patch("/profile",u,c),e.exports=m},86:(e,t,s)=>{const r=s(252),{check:a}=s(975),{waitlistLimiter:o}=s(334),{joinWaitlist:i,getWaitlistStats:n}=s(963),c=r.Router();c.post("/join",o,[a("name").trim().notEmpty().withMessage("Name is required").isLength({min:2,max:50}).withMessage("Name must be between 2 and 50 characters").matches(/^[a-zA-Z\s]*$/).withMessage("Name can only contain letters and spaces"),a("email").trim().notEmpty().withMessage("Email is required").isEmail().withMessage("Please enter a valid email").normalizeEmail()],i),c.get("/stats",n),e.exports=c},729:e=>{"use strict";e.exports=require("bcryptjs")},577:e=>{"use strict";e.exports=require("cors")},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},763:e=>{"use strict";e.exports=require("express-rate-limit")},975:e=>{"use strict";e.exports=require("express-validator")},829:e=>{"use strict";e.exports=require("jsonwebtoken")},37:e=>{"use strict";e.exports=require("mongoose")},572:e=>{"use strict";e.exports=require("nodemailer")},277:e=>{"use strict";e.exports=require("serverless-http")},124:e=>{"use strict";e.exports=require("winston")}},t={};function s(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,s),o.exports}var r={};(()=>{var e=r;s(252);const t=s(277),a=s(37),o=t(s(993));e.handler=async(e,t)=>(t.callbackWaitsForEmptyEventLoop=!1,1!==a.connection.readyState&&await a.connect(process.env.MONGODB_URI,{useNewUrlParser:!0,useUnifiedTopology:!0}),await o(e,t))})(),module.exports=r})();